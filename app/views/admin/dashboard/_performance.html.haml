-channels.each do |c|
  %h3
    #{c.name} Channel
  %h4 
    Financials (excl. GST)
  %table
    %thead
      %tr
        %th Week
        %th Turnover
        %th % Change turnover
        %th Cost*
        %th % Change cost
        %th Gross Profit
        %th % Change profit

    %tbody
      -@channel = c.decorate
      -first_day = StatsPolicy.new(Date.today().weeks_ago(num_weeks)).stats_begin_date
      -dates = @channel.dates_table(first_day,period,num_weeks)
      -financial_table = @channel.financial_table(first_day,1.week,num_weeks)

      -(1..num_weeks).each do |i|
        %tr
          %td #{dates[i-1].strftime("%d %b")} - #{(dates[i-1] + period).strftime("%d %b")} #{ "(projected)" if Time.now < (dates[i-1] + period)}
          %td #{number_to_currency financial_table[i-1].turnover}
          %td #{number_to_percentage( financial_table[i-1].percent_turnover, :precision => 0)}
          %td #{number_to_currency financial_table[i-1].cost}
          %td #{number_to_percentage( financial_table[i-1].percent_cost, :precision => 0)}
          %td #{number_to_currency financial_table[i-1].profit}
          %td #{number_to_percentage( financial_table[i-1].percent_profit, :precision => 0)}
      %tr
        %td <b> Average of #{num_weeks} weeks </b>
        %td <b> #{number_to_currency( financial_table.average("turnover") )} </b>
        %td <b> #{number_to_percentage( financial_table.average("percent_turnover") , :precision => 0 )} </b>
        %td <b> #{number_to_currency( financial_table.average("cost")  )} </b>
        %td <b> #{number_to_percentage( financial_table.average("percent_cost") , :precision => 0 )} </b>
        %td <b> #{number_to_currency( financial_table.average("profit")  )} </b>
        %td <b> #{number_to_percentage( financial_table.average("percent_profit") , :precision => 0 )} </b>

  %p
    *Cost includes teacher, venue and material cost

  %h4 
    Classes
  %table
    %thead
      %tr
        %th Week
        %th Classes ran
        %th % Change Classes
        %th Paid classes ran
        %th % Change paid classes
        %th Cancellations
        %th % Change cancellations

    %tbody
      -lessons_table = @channel.lessons_table(first_day,1.week,num_weeks)
      -(1..num_weeks).each do |i|
        %tr
          %td #{dates[i-1].strftime("%d %b")} - #{(dates[i-1] + period).strftime("%d %b")} #{ "(projected)" if Time.now < (dates[i-1] + period)}
          %td #{lessons_table[i-1].lessons_ran} ( #{lessons_table[i-1].new_lessons_ran} new / #{lessons_table[i-1].lessons_ran - lessons_table[i-1].new_lessons_ran} repeat )
          %td #{number_to_percentage( lessons_table[i-1].percent_lessons_ran, :precision => 0)}
          %td #{lessons_table[i-1].paid_lessons} paid classes ( #{lessons_table[i-1].lessons_ran - lessons_table[i-1].paid_lessons} free classes )
          %td #{number_to_percentage( lessons_table[i-1].percent_paid_lessons, :precision => 0)}
          %td #{lessons_table[i-1].cancelled_lessons} ( #{lessons_table[i-1].new_cancelled_lessons} new / #{lessons_table[i-1].cancelled_lessons - lessons_table[i-1].new_cancelled_lessons} repeat )
          %td #{number_to_percentage( lessons_table[i-1].percent_cancelled_lessons, :precision => 0)}
      %tr
        %td <b> Average of #{num_weeks} weeks </b>
        %td <b> #{number_to_human lessons_table.average("lessons_ran")} classes </b>
        %td <b> #{number_to_percentage( lessons_table.average("percent_lessons_ran"), :precision => 0)} </b>
        %td <b> #{number_to_human lessons_table.average("paid_lessons")} classes </b>
        %td <b> #{number_to_percentage( lessons_table.average("percent_paid_lessons"), :precision => 0)} </b>
        %td <b> #{number_to_human lessons_table.average("cancelled_lessons")} classes </b>
        %td <b> #{number_to_percentage( lessons_table.average("percent_cancelled_lessons"), :precision => 0)} </b>

  %h4 
    Chalklers
  %table
    %thead
      %tr
        %th Period
        %th Attendees
        %th % Change attendees
        %th New members
        %th % Change new members
        %th Active members*

    %tbody
      -chalkler_table = @channel.chalkler_table(first_day,1.week,num_weeks)
      -(1..num_weeks).each do |i|
        %tr
          %td #{dates[i-1].strftime("%d %b")} - #{(dates[i-1] + period).strftime("%d %b")} #{ "(projected)" if Time.now < (dates[i-1] + period)}
          %td #{lessons_table[i-1].attendee} chalklers ( The average class is #{number_to_percentage(lessons_table[i-1].fill_fraction, :precision => 0)} filled )
          %td #{number_to_percentage(lessons_table[i-1].percent_attendee, :precision => 0)}
          %td #{chalkler_table[i-1].new_chalklers}
          %td #{number_to_percentage(chalkler_table[i-1].percent_new_chalklers, :precision => 0)}
          %td #{number_to_percentage(chalkler_table[i-1].percent_active,:precision => 0)}

      %tr
        %td <b> Average of #{num_weeks} weeks </b>
        %td <b> #{number_to_human lessons_table.average("attendee")} chalklers </b>
        %td <b> #{number_to_percentage( lessons_table.average("percent_attendee"), :precision => 0)} </b>
        %td <b> #{number_to_human chalkler_table.average("new_chalklers")} chalklers </b>
        %td <b> #{number_to_percentage( chalkler_table.average("percent_new_chalklers"), :precision => 0)} </b>
        %td <b> #{number_to_percentage( chalkler_table.average("percent_active"), :precision => 0)} </b>

  %p
    *A chalkler is active if he has RSVP activities within the last 3 months




     
