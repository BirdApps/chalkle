-channels.each do |c|
  %h3
    #{c.name} Channel
  %h4 
    Financials (excl. GST)
  %table
    %thead
      %tr
        %th Week
        %th Turnover
        %th % Change turnover
        %th Cost*
        %th % Change cost
        %th Gross Profit
        %th % Change profit

    %tbody
      -last_day = Date.today().end_of_week(start_day= :wednesday)
      -financials = c.performance_financials(last_day, num_weeks)
      -turnover = financials[0]
      -turnover_change = financials[1]
      -costs = financials[2]
      -costs_change = financials[3]
      -profits = financials[4]
      -profits_change = financials[5]
      -(1..num_weeks).each do |i|
        %tr
          -start_date = (Date.today() - last_day.weeks_ago(i) ).to_i
          -end_date = (Date.today() - last_day.weeks_ago(i-1) ).to_i
          %td #{last_day.weeks_ago(i).strftime("%d %b")} - #{last_day.weeks_ago(i-1).strftime("%d %b")} #{ "(projected)" if end_date < 0}
          %td #{number_to_currency turnover[i-1]}
          %td #{number_to_percentage( turnover_change[i-1], :precision => 0)}
          %td #{number_to_currency costs[i-1]}
          %td #{number_to_percentage( costs_change[i-1], :precision => 0)}
          %td #{number_to_currency profits[i-1]}
          %td #{number_to_percentage( profits_change[i-1], :precision => 0)}
      %tr
        -turnover_change.reject! {|x| x.nil?}
        -costs_change.reject! {|x| x.nil?}
        -profits_change.reject! {|x| x.nil?}
        %td <b> Average of #{num_weeks} weeks </b>
        %td <b> #{number_to_currency(turnover.sum / turnover.length)} </b>
        %td <b> #{number_to_percentage( turnover_change.length > 0 ? turnover_change.sum / turnover_change.length : nil, :precision => 0)} </b>
        %td <b> #{number_to_currency(costs.sum / costs.length )} </b>
        %td <b> #{number_to_percentage( costs_change.length > 0 ? costs_change.sum / costs_change.length : nil, :precision => 0)} </b>
        %td <b> #{number_to_currency(profits.sum / profits.length)} </b>
        %td <b> #{number_to_percentage( profits_change.length > 0 ? profits_change.sum / profits_change.length : nil, :precision => 0)} </b>

  %p
    *Cost includes teacher, venue and material cost

  %h4 
    Classes
  %table
    %thead
      %tr
        %th Week
        %th Classes ran
        %th % Change Classes
        %th Paid classes ran
        %th % Change paid classes
        %th Cancellations
        %th % Change cancellations

    %tbody
      -performance_lessons = c.performance_lessons(last_day, num_weeks)
      -lessons = performance_lessons[0]
      -lessons_change = performance_lessons[1]
      -pay_lessons = performance_lessons[2]
      -pay_lessons_change = performance_lessons[3]
      -cancellations = performance_lessons[4]
      -cancellations_change = performance_lessons[5]
      -(1..num_weeks).each do |i|
        %tr
          -previous_week = (Date.today() - last_day.weeks_ago(i + 1) ).to_i
          -start_date = (Date.today() - last_day.weeks_ago(i) ).to_i
          -end_date = (Date.today() - last_day.weeks_ago(i-1) ).to_i
          %td #{last_day.weeks_ago(i).strftime("%d %b")} - #{last_day.weeks_ago(i-1).strftime("%d %b")} #{ "(projected)" if end_date < 0}
          %td #{lessons[i-1].sum()} ( #{lessons[i-1].first} new / #{lessons[i-1].last} repeat )
          %td #{number_to_percentage( lessons_change[i-1], :precision => 0)}
          %td #{pay_lessons[i-1]} paid classes ( #{lessons[i-1].sum() - pay_lessons[i-1]} free classes )
          %td #{number_to_percentage( pay_lessons_change[i-1], :precision => 0)}
          %td #{cancellations[i-1].sum()} ( #{cancellations[i-1].first} new / #{cancellations[i-1].last} repeat )
          %td #{number_to_percentage( cancellations_change[i-1], :precision => 0)}
          -lessons[i-1] = lessons[i-1].sum()
          -cancellations[i-1] = cancellations[i-1].sum()
      %tr
        -lessons_change.reject! {|x| x.nil?}
        -cancellations_change.reject! {|x| x.nil?}
        -pay_lessons_change.reject! {|x| x.nil?}
        %td <b> Average of #{num_weeks} weeks </b>
        %td <b> #{number_to_human lessons.sum.to_d / lessons.length} classes </b>
        %td <b> #{number_to_percentage( lessons_change.length > 0 ? lessons_change.sum / lessons_change.length : nil, :precision => 0)} </b>
        %td <b> #{number_to_human pay_lessons.sum.to_d / pay_lessons.length} classes </b>
        %td <b> #{number_to_percentage( pay_lessons_change.length > 0 ? pay_lessons_change.sum.to_d / pay_lessons_change.length : nil, :precision => 0)} </b>
        %td <b> #{number_to_human cancellations.sum.to_d / cancellations.length} classes </b>
        %td <b> #{number_to_percentage( cancellations_change.length > 0 ? cancellations_change.sum / cancellations_change.length : nil, :precision => 0)} </b>

  %h4 
    Chalklers
  %table
    %thead
      %tr
        %th Period
        %th Attendees
        %th % Change attendees
        %th New members
        %th % Change new members
        %th Active members*

    %tbody
      -performance_chalklers = c.performance_chalklers(last_day, num_weeks)
      -attendees = performance_chalklers[0]
      -attendees_change = performance_chalklers[1]
      -new_members = performance_chalklers[2]
      -new_members_change = performance_chalklers[3]
      -active_members = performance_chalklers[4]
      -(1..num_weeks).each do |i|
        %tr
          -previous_week = (Date.today() - last_day.weeks_ago(i + 1) ).to_i
          -start_date = (Date.today() - last_day.weeks_ago(i) ).to_i
          -end_date = (Date.today() - last_day.weeks_ago(i-1) ).to_i
          %td #{last_day.weeks_ago(i).strftime("%d %b")} - #{last_day.weeks_ago(i-1).strftime("%d %b")} #{ "(projected)" if end_date < 0} 
          %td #{attendees[i-1]} chalklers ( The average class is #{number_to_percentage(c.fill_fraction(start_date,end_date),:precision => 0) } filled )
          %td #{number_to_percentage( attendees_change[i-1], :precision => 0)}
          %td #{new_members[i-1]}
          %td #{number_to_percentage( new_members_change[i-1], :precision => 0)}
          %td #{number_to_percentage(active_members[i-1],:precision => 0)}

      %tr
        -attendees_change.reject! {|x| x.nil?}
        -new_members_change.reject! {|x| x.nil?}
        %td <b> Average of #{num_weeks} weeks </b>
        %td <b> #{number_to_human attendees.sum / attendees.length} chalklers </b>
        %td <b> #{number_to_percentage( attendees_change.length > 0 ? attendees_change.sum / attendees_change.length : 0, :precision => 0)} </b>
        %td <b> #{number_to_human new_members.sum / new_members.length} chalklers </b>
        %td <b> #{number_to_percentage( new_members_change.length > 0 ? new_members_change.sum / new_members_change.length : 0, :precision => 0)} </b>
        %td <b> #{number_to_percentage( active_members.sum / active_members.length, :precision => 0)} </b>

  %p
    *A chalkler is active if he has RSVP activities within the last 3 months




     
