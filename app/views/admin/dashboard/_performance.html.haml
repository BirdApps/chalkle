-channels.each do |c|
  %h3
    #{c.name} Channel
  %h4 
    Financials (excl. GST)
  %table
    %thead
      %tr
        %th Week
        %th Turnover
        %th % Change turnover
        %th Cost*
        %th % Change cost
        %th Gross Profit
        %th % Change profit

    %tbody
      -@channel = c.decorate
      -last_day = Stats_policy.new(Date.today).stats_end_date
      -turnover = Stats_math.new(@channel.turnover_table(last_day, 1.week, num_weeks + 1))
      -cost = Stats_math.new(@channel.cost_table(last_day, 1.week, num_weeks + 1))
      -profit = Stats_math.new(turnover.values - cost.values)

      -(1..num_weeks).each do |i|
        %tr
          %td #{last_day.weeks_ago(i).strftime("%d %b")} - #{last_day.weeks_ago(i-1).strftime("%d %b")} #{ "(projected)" if Time.now < last_day.weeks_ago(i-1)}
          %td #{number_to_currency turnover.values[i-1]}
          %td #{number_to_percentage( turnover.percent_change[i-1], :precision => 0)}
          %td #{number_to_currency cost.values[i-1]}
          %td #{number_to_percentage( cost.percent_change[i-1], :precision => 0)}
          %td #{number_to_currency profit.values[i-1]}
          %td #{number_to_percentage( profit.percent_change[i-1], :precision => 0)}
      %tr
        %td <b> Average of #{num_weeks} weeks </b>
        %td <b> #{number_to_currency( turnover.average(num_weeks) )} </b>
        %td <b> #{number_to_percentage( turnover.percent_average(num_weeks), :precision => 0 )} </b>
        %td <b> #{number_to_currency( cost.average(num_weeks) )} </b>
        %td <b> #{number_to_percentage( cost.percent_average(num_weeks), :precision => 0 )} </b>
        %td <b> #{number_to_currency( profit.average(num_weeks) )} </b>
        %td <b> #{number_to_percentage( profit.percent_average(num_weeks), :precision => 0 )} </b>

  %p
    *Cost includes teacher, venue and material cost

  %h4 
    Classes
  %table
    %thead
      %tr
        %th Week
        %th Classes ran
        %th % Change Classes
        %th Paid classes ran
        %th % Change paid classes
        %th Cancellations
        %th % Change cancellations

    %tbody
      -lessons = Stats_math.new(@channel.lessons_ran_table(last_day, 1.week, num_weeks + 1))
      -new_lessons = Stats_math.new(@channel.new_lessons_ran_table(last_day, 1.week, num_weeks + 1))
      -pay_lessons = Stats_math.new(@channel.paid_lessons_table(last_day, 1.week, num_weeks + 1))
      -cancellations = Stats_math.new(@channel.cancelled_lessons_table(last_day, 1.week, num_weeks + 1))
      -new_cancellations = Stats_math.new(@channel.new_cancelled_lessons_table(last_day, 1.week, num_weeks + 1))
      -(1..num_weeks).each do |i|
        %tr
          %td #{last_day.weeks_ago(i).strftime("%d %b")} - #{last_day.weeks_ago(i-1).strftime("%d %b")} #{ "(projected)" if Time.now < last_day.weeks_ago(i-1)}
          %td #{lessons.values[i-1]} ( #{new_lessons.values[i-1]} new / #{lessons.values[i-1] - new_lessons.values[i-1]} repeat )
          %td #{number_to_percentage( lessons.percent_change[i-1], :precision => 0)}
          %td #{pay_lessons.values[i-1]} paid classes ( #{lessons.values[i-1] - pay_lessons.values[i-1]} free classes )
          %td #{number_to_percentage( pay_lessons.percent_change[i-1], :precision => 0)}
          %td #{cancellations.values[i-1]} ( #{new_cancellations.values[i-1]} new / #{cancellations.values[i-1]- new_cancellations.values[i-1]} repeat )
          %td #{number_to_percentage( cancellations.percent_change[i-1], :precision => 0)}
      %tr
        %td <b> Average of #{num_weeks} weeks </b>
        %td <b> #{number_to_human lessons.average(num_weeks)} classes </b>
        %td <b> #{number_to_percentage( lessons.percent_average(num_weeks), :precision => 0)} </b>
        %td <b> #{number_to_human pay_lessons.average(num_weeks)} classes </b>
        %td <b> #{number_to_percentage( pay_lessons.percent_average(num_weeks), :precision => 0)} </b>
        %td <b> #{number_to_human cancellations.average(num_weeks)} classes </b>
        %td <b> #{number_to_percentage( cancellations.percent_average(num_weeks), :precision => 0)} </b>

  %h4 
    Chalklers
  %table
    %thead
      %tr
        %th Period
        %th Attendees
        %th % Change attendees
        %th New members
        %th % Change new members
        %th Active members*

    %tbody
      -attendees = Stats_math.new(@channel.attendee_table(last_day, 1.week, num_weeks + 1))
      -fill_fraction = Stats_math.new(@channel.fill_fraction_table(last_day, 1.week, num_weeks + 1))
      -new_members = Stats_math.new(@channel.new_chalklers_table(last_day, 1.week, num_weeks + 1))
      -active_members = Stats_math.new(@channel.percent_active_table(last_day, 1.week, num_weeks + 1))
      -(1..num_weeks).each do |i|
        %tr
          %td #{last_day.weeks_ago(i).strftime("%d %b")} - #{last_day.weeks_ago(i-1).strftime("%d %b")} #{ "(projected)" if Time.now < last_day.weeks_ago(i-1)}
          %td #{attendees.values[i-1]} chalklers ( The average class is #{number_to_percentage(fill_fraction.values[i-1], :precision => 0)} filled )
          %td #{number_to_percentage(attendees.percent_change[i-1], :precision => 0)}
          %td #{new_members.values[i-1]}
          %td #{number_to_percentage( new_members.percent_change[i-1], :precision => 0)}
          %td #{number_to_percentage(active_members.values[i-1],:precision => 0)}

      %tr
        %td <b> Average of #{num_weeks} weeks </b>
        %td <b> #{number_to_human attendees.average(num_weeks)} chalklers </b>
        %td <b> #{number_to_percentage( attendees.percent_average(num_weeks), :precision => 0)} </b>
        %td <b> #{number_to_human new_members.average(num_weeks)} chalklers </b>
        %td <b> #{number_to_percentage( new_members.percent_average(num_weeks), :precision => 0)} </b>
        %td <b> #{number_to_percentage( active_members.average(num_weeks), :precision => 0)} </b>

  %p
    *A chalkler is active if he has RSVP activities within the last 3 months




     
