-channels.each do |c|
  %h3
    #{c.name} Channel
  %h4 
    Financials (excl. GST)
  %table
    %thead
      %tr
        %th Week
        %th Turnover
        %th % Change turnover
        %th Cost*
        %th % Change cost
        %th Gross Profit
        %th % Change profit

    %tbody
      -last_day = Date.today().end_of_week(start_day= :wednesday)
      -revenues = []
      -revenues[0] = Channel.total_revenue((Date.today() - last_day.weeks_ago(1)).to_i,(Date.today() - last_day).to_i,c.id)
      -revenues_change = []
      -costs = []
      -costs[0] = Channel.total_cost((Date.today() - last_day.weeks_ago(1)).to_i,(Date.today() - last_day).to_i,c.id)
      -costs_change = []
      -profits = []
      -profits[0] = revenues[0] - costs[0]
      -profits_change = []
      -(1..num_weeks).each do |i|
        %tr
          -previous_week = (Date.today() - last_day.weeks_ago(i + 1) ).to_i
          -start_date = (Date.today() - last_day.weeks_ago(i) ).to_i
          -end_date = (Date.today() - last_day.weeks_ago(i-1) ).to_i
          -revenues[i] = Channel.total_revenue(previous_week,start_date,c.id)
          -revenues_change[i-1] = (revenues[i] > 0) ? (revenues[i-1]/revenues[i] - 1.0)*100.0 : nil
          -costs[i] = Channel.total_cost(previous_week,start_date,c.id)
          -costs_change[i-1] = (costs[i] > 0) ? (costs[i-1]/costs[i] - 1.0)*100.0 : nil
          -profits[i] = revenues[i] - costs[i]
          -profits_change[i-1] = (profits[i] > 0) ? (profits[i-1]/profits[i] - 1.0)*100.0 : nil
          %td #{last_day.weeks_ago(i).strftime("%d %b")} - #{last_day.weeks_ago(i-1).strftime("%d %b")} #{ "(projected)" if end_date < 0}
          %td #{number_to_currency revenues[i-1]}
          %td #{number_to_percentage( revenues_change[i-1], :precision => 0)}
          %td #{number_to_currency costs[i-1]}
          %td #{number_to_percentage( costs_change[i-1], :precision => 0)}
          %td #{number_to_currency profits[i-1]}
          %td #{number_to_percentage( profits_change[i-1], :precision => 0)}
      %tr
        -revenues.pop
        -costs.pop
        -profits.pop
        -revenues_change.reject! {|x| x.nil?}
        -costs_change.reject! {|x| x.nil?}
        -profits_change.reject! {|x| x.nil?}
        %td <b> Average of #{num_weeks} weeks </b>
        %td <b> #{number_to_currency(revenues.sum / revenues.length)} </b>
        %td <b> #{number_to_percentage( revenues_change.length > 0 ? revenues_change.sum / revenues_change.length : nil, :precision => 0)} </b>
        %td <b> #{number_to_currency(costs.sum / costs.length )} </b>
        %td <b> #{number_to_percentage( costs_change.length > 0 ? costs_change.sum / costs_change.length : nil, :precision => 0)} </b>
        %td <b> #{number_to_currency(profits.sum / profits.length)} </b>
        %td <b> #{number_to_percentage( profits_change.length > 0 ? profits_change.sum / profits_change.length : nil, :precision => 0)} </b>

  %p
    *Cost includes teacher, venue and material cost

  %h4 
    Classes
  %table
    %thead
      %tr
        %th Week
        %th Classes ran
        %th % Change Classes
        %th Paid classes ran
        %th % Change paid classes
        %th Cancellations
        %th % Change cancellations

    %tbody
      -lessons = []
      -lessons[0] = Channel.classes_run((Date.today() - last_day.weeks_ago(1)).to_i,(Date.today() - last_day).to_i,c.id)
      -lessons_change = []
      -pay_lessons = []
      -pay_lessons[0] = Channel.classes_pay((Date.today() - last_day.weeks_ago(1)).to_i,(Date.today() - last_day).to_i,c.id)
      -pay_lessons_change =[]
      -cancellations = []
      -cancellations[0] = Channel.classes_cancel((Date.today() - last_day.weeks_ago(1)).to_i,(Date.today() - last_day).to_i,c.id)
      -cancellations_change = []

      -(1..num_weeks).each do |i|
        %tr
          -previous_week = (Date.today() - last_day.weeks_ago(i + 1) ).to_i
          -start_date = (Date.today() - last_day.weeks_ago(i) ).to_i
          -end_date = (Date.today() - last_day.weeks_ago(i-1) ).to_i
          -lessons[i] = Channel.classes_run(previous_week,start_date,c.id)          
          -lessons_change[i-1] = (lessons[i].sum() > 0) ? (lessons[i-1].sum().to_d/lessons[i].sum() - 1.0)*100.0 : nil
          -pay_lessons[i] = Channel.classes_pay(previous_week,start_date,c.id)
          -pay_lessons_change[i-1] = (pay_lessons[i] > 0) ? (pay_lessons[i-1].to_d/pay_lessons[i] - 1.0)*100.0 : nil
          -cancellations[i] = Channel.classes_cancel(previous_week,start_date,c.id)
          -cancellations_change[i-1] = (cancellations[i].sum() > 0) ? (cancellations[i-1].sum().to_d/cancellations[i].sum() - 1.0)*100.0 : nil
          %td #{last_day.weeks_ago(i).strftime("%d %b")} - #{last_day.weeks_ago(i-1).strftime("%d %b")} #{ "(projected)" if end_date < 0}
          %td #{lessons[i-1].sum()} ( #{lessons[i-1].first} new / #{lessons[i-1].last} repeat )
          %td #{number_to_percentage( lessons_change[i-1], :precision => 0)}
          %td #{pay_lessons[i-1]} paid classes ( #{lessons[i-1].sum() - pay_lessons[i-1]} free classes )
          %td #{number_to_percentage( pay_lessons_change[i-1], :precision => 0)}
          %td #{cancellations[i-1].sum()} ( #{cancellations[i-1].first} new / #{cancellations[i-1].last} repeat )
          %td #{number_to_percentage( cancellations_change[i-1], :precision => 0)}
          -lessons[i-1] = lessons[i-1].sum()
          -cancellations[i-1] = cancellations[i-1].sum()
      %tr
        -lessons.pop
        -cancellations.pop
        -pay_lessons.pop
        -lessons_change.reject! {|x| x.nil?}
        -cancellations_change.reject! {|x| x.nil?}
        -pay_lessons_change.reject! {|x| x.nil?}
        %td <b> Average of #{num_weeks} weeks </b>
        %td <b> #{number_to_human lessons.sum.to_d / lessons.length} classes </b>
        %td <b> #{number_to_percentage( lessons_change.length > 0 ? lessons_change.sum / lessons_change.length : nil, :precision => 0)} </b>
        %td <b> #{number_to_human pay_lessons.sum.to_d / pay_lessons.length} classes </b>
        %td <b> #{number_to_percentage( pay_lessons_change.length > 0 ? pay_lessons_change.sum.to_d / pay_lessons_change.length : nil, :precision => 0)} </b>
        %td <b> #{number_to_human cancellations.sum.to_d / cancellations.length} classes </b>
        %td <b> #{number_to_percentage( cancellations_change.length > 0 ? cancellations_change.sum / cancellations_change.length : nil, :precision => 0)} </b>

  %h4 
    Chalklers
  %table
    %thead
      %tr
        %th Period
        %th Attendees
        %th % Change attendees
        %th New members
        %th % Change new members
        %th Active members*

    %tbody
      -attendees = []
      -attendees[0] = Channel.attendee((Date.today() - last_day.weeks_ago(1)).to_i,(Date.today() - last_day).to_i,c.id)
      -attendees_change = []
      -new_members = []
      -new_members[0] = Channel.new_chalklers((Date.today() - last_day.weeks_ago(1)).to_i,(Date.today() - last_day).to_i,c.id)
      -new_members_change = []
      -active_members = []
      -active_members[0] = Channel.percent_active(0,c.id)
      -(1..num_weeks).each do |i|
        %tr
          -previous_week = (Date.today() - last_day.weeks_ago(i + 1) ).to_i
          -start_date = (Date.today() - last_day.weeks_ago(i) ).to_i
          -end_date = (Date.today() - last_day.weeks_ago(i-1) ).to_i
          -attendees[i] = Channel.attendee(previous_week,start_date,c.id)
          -attendees_change[i-1] = (attendees[i] > 0) ? (attendees[i-1].to_d/attendees[i] - 1.0)*100.0 : nil
          -new_members[i] = Channel.new_chalklers(previous_week,start_date,c.id)
          -new_members_change[i-1] = (new_members[i] > 0) ? (new_members[i-1].to_d/new_members[i] - 1.0)*100.0 : nil
          -active_members[i] = Channel.percent_active(i,c.id)
          %td #{last_day.weeks_ago(i).strftime("%d %b")} - #{last_day.weeks_ago(i-1).strftime("%d %b")} #{ "(projected)" if end_date < 0} 
          %td #{attendees[i-1]} chalklers ( The average class is #{number_to_percentage(Channel.fill_fraction(start_date,end_date,c.id),:precision => 0) } filled )
          %td #{number_to_percentage( attendees_change[i-1], :precision => 0)}
          %td #{new_members[i-1]}
          %td #{number_to_percentage( new_members_change[i-1], :precision => 0)}
          %td #{number_to_percentage(active_members[i-1],:precision => 0)}

      %tr
        -attendees.pop
        -new_members.pop
        -active_members.pop
        -attendees_change.reject! {|x| x.nil?}
        -new_members_change.reject! {|x| x.nil?}
        %td <b> Average of #{num_weeks} weeks </b>
        %td <b> #{number_to_human attendees.sum / attendees.length} chalklers </b>
        %td <b> #{number_to_percentage( attendees_change.length > 0 ? attendees_change.sum / attendees_change.length : 0, :precision => 0)} </b>
        %td <b> #{number_to_human new_members.sum / new_members.length} chalklers </b>
        %td <b> #{number_to_percentage( new_members_change.length > 0 ? new_members_change.sum / new_members_change.length : 0, :precision => 0)} </b>
        %td <b> #{number_to_percentage( active_members.sum / active_members.length, :precision => 0)} </b>

  %p
    *A chalkler is active if he has RSVP activities within the last 3 months




     
